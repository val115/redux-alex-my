import React, {Component} from 'react'
import { connect } from 'react-redux'
import * as R from 'ramda'
import {Link} from 'react-router-dom'

import { fetchPhoneById, addPhoneToBasket } from 'actions'
import { getPhoneById } from 'selectors'
import BasketCart from 'generalcomp/basketCart'


class Phone extends Component {
  componentDidMount() {
    // console.log('Props= ', this.props)
    //получаем id  телефона
    const phoneId = this.props.match.params.id
    this.props.fetchPhoneById(phoneId)
  }

  // метод для отрисовки таб
  renderField() {
    // теперь, после проверки на существования this.props можно выводить данные
    const { phone } = this.props
    //делае массив из массивов [["camera", "data camera"]]
    //проходим двумя map  и выводим все поля
    const columnField = R.compose( //сompouse(a, b, c) - композиция методов a, b, c, которая вызываем функции справо налево на тип данных phone
      R.toPairs,  //преобразует в двух мерный массив, который образовался из R.pick c ключем и значением
      R.pick([  //выбирает поля
        'cpu',
        'camera',
        'size',
        'weight',
        'display',
        'battery',
        'memory'
      ])
    )(phone)

    // console.log('columns =', columnField)
    // здесь мыпим двумерный массив [key, value] - дестриктурированный
    return columnField.map(([key, value]) => (
      <div className='column' key={key}>
        <div className='ab-details-title'>
          <p>{key}</p>
        </div>
        <div className='ab-details-info'>
          {value}
        </div>
      </div>
    ))
  }

  renderContent() {
    // теперь, после проверки на существования this.props можно выводить данные
    const { phone } = this.props
    return (
      <div className='thumbnail'>
        <div className='col-md-6'>
          <img className='img-thumbnail'
            src={phone.image}
            alt={phone.name}
          />
        </div>
        <div className='col-md-6'>
          {/* таблица с полями товаров */}
          Our fields {this.renderField()}  
        </div>
        <div className='caption-full'>
          <h4 className='pull-right'>${phone.price}</h4>
          <h4>{phone.name}</h4>
          <p>{phone.description}</p>
        </div>
      </div>
    )
  }

  renderSidebar() {
    const { phone, addPhoneToBasket } = this.props
    
    return (
      <div>
        <p className='lead'>Quick shop</p>
        <BasketCart />
        <div className='form-group'>
          <h1>{phone.name}</h1>
          <h2>${phone.price}</h2>
        </div>
        <Link to='/' className='btn btn-info btn-block'>
          Back to store
        </Link>
        <button
          type='button'
          className='btn btn-success btn-block'
          onClick={() => addPhoneToBasket(phone.id)}
        >
          Add to cart
        </button>
      </div>
    )
  }



  render() {
    // усли в консоле phone undefined , то надо делать условие на наличие phone
    const { phone } = this.props  
    // console.log('PHONE= ', phone)

    return (
      <div className='view-container'>
        <div>Phone</div>
        <div className='container'>
          <div className='row'>
            <div className='col-md-9'>
              {/* если существует phone, то выполниться this.renderContent() */}
              {phone && this.renderContent() }
            </div>
            <div className='col-md-3'>
              { phone && this.renderSidebar() }
            </div>
          </div>
        </div>
      </div>

    )
  }
    
}

const mapStateToProps = state => {
  return {
    phone: getPhoneById(state, state.phonePage.id)
  }
}

const mapDispatchToProps = {
  fetchPhoneById,
  addPhoneToBasket
}

export default connect(mapStateToProps, mapDispatchToProps)(Phone)
