import * as R from 'ramda'

import {
  FETCH_PHONES_START,
  FETCH_PHONES_SUCCESS,
  FETCH_PHONES_FAILURE,

  LOAD_MORE_PHONES_FAILURE,
  LOAD_MORE_PHONES_START,
  LOAD_MORE_PHONES_SUCCESS,

  FETCH_PHONES_BY_ID_FAILURE,
  FETCH_PHONES_BY_ID_START,
  FETCH_PHONES_BY_ID_SUCCESS,

  FETCH_CATEGORIES_FAILURE,
  FETCH_CATEGORIES_START,
  FETCH_CATEGORIES_SUCCESS,

  ADD_PHONE_TO_BASKET,
  SEARCH_PHONE,
  REMUVE_FONE_FROM_BASKET,
  CLEAN_BASKET,

  BOOKS_LOADED,
  PHONES_LOADED,
  LOAD_MORE_BOOKS
} from 'actionTypes'

import {
  fetchPhones as fetchPhonesApi,
  loadMorePhones as loadMorePhonesApi,
  fetchPhoneById as fetchPhoneByIdApi,
  fetchCategories as fetchCategoriesApi
} from 'api'
  
import { getRenderedPhonesLength } from 'selectors'

import {getBooksMoreService} from 'data-services/data-sevices'
// ======================




export const booksLoaded = (newBooks)  => {
  // console.log('action-NEW = ', newBooks)
  return {
    type: BOOKS_LOADED,
    payload: newBooks
  };
};

export const booksLoaded2 = (newBooks)  => (dispatch) => {
  dispatch ( {
    type: BOOKS_LOADED,
    payload: newBooks
  });
};

export const loadMoreBooks = () => async (dispatch, getState) => {
  const state = getState()
  //получаем длинну сдвига
  const offset = R.length(state.booksIds.ids)
  // получаем данные
  const moreBooks = await getBooksMoreService({offset})
 dispatch ({
    type: LOAD_MORE_BOOKS,
    payload:  moreBooks
  })
};

export const phonesLoaded = (newPhones) => {
  // console.log('action-NEW = ', newPhones)
  return {
    type: PHONES_LOADED,
    payload: newPhones
  };
};



// ============================================================
export const fetchPhones = () => async dispatch => {
  dispatch({ //не асинхронно
    type: FETCH_PHONES_START  
  })
  try {
    //agent.get('http://google.com/api.then(res => { dispatch})) - получение данных
    const phones = await fetchPhonesApi() //получаем данные в другом месте
    dispatch({
      type: FETCH_PHONES_SUCCESS,
      payload: phones
    })
  } catch (err) {
    dispatch({
      type: FETCH_PHONES_FAILURE,
      payload: err,
      error: true
    })
  }
}

// ============================================================
export const fetchCategories = () => async dispatch => {
  dispatch({ //не асинхронно
    type: FETCH_CATEGORIES_START  
  })
  try {
    //agent.get('http://google.com/api.then(res => { dispatch})) - получение данных
    const categories = await fetchCategoriesApi() //получаем данные в другом месте
    dispatch({
      type: FETCH_CATEGORIES_SUCCESS,
      payload: categories
    })
  } catch (err) {
    dispatch({
      type: FETCH_CATEGORIES_FAILURE,
      payload: err,
      error: true
    })
  }
}

//const offset = 10;  //сдвиг получения данныч  //это делается в selectors
//const offset = state => R.length(state.phonesPage.ids)
//в Redux thunc - два аргумента (dispatch, getState)
export const loadMorePhones = () => async (dispatch, getState) => {
  const offset = getRenderedPhonesLength(getState())
  dispatch({  
    type: LOAD_MORE_PHONES_START
  })

  try {    
    const phones = await loadMorePhonesApi({ offset })  
    dispatch({
      type: LOAD_MORE_PHONES_SUCCESS,
      payload: phones
    })
  } catch (err) {
    dispatch({
      type: LOAD_MORE_PHONES_FAILURE,
      payload: err,
      error: true
    })
  }
}

export const fetchPhoneById = (id) => async dispatch => {
  dispatch({
    type: FETCH_PHONES_BY_ID_START
  })

  try {
    const phone = await fetchPhoneByIdApi(id)
    dispatch({
      type: FETCH_PHONES_BY_ID_SUCCESS,
      payload: phone
    })
  } catch (err) {
    dispatch({
      type: FETCH_PHONES_BY_ID_FAILURE,
      payload: err,
      error: true
    })
  }
}

export const addPhoneToBasket = (id) => (dispatch) => {
  dispatch({
    type: ADD_PHONE_TO_BASKET,
    payload: id
  });
};

export const searchPhone = (value) => (dispatch) => {
  dispatch({
    type: SEARCH_PHONE,
    payload: value
  });
};


export const removePhoneFromBasket = (id) => (dispatch) => {
  dispatch({
    type: REMUVE_FONE_FROM_BASKET,
    payload: id
  });
};


export const cleanBasket = () => (dispatch) => {
  dispatch({
    type: CLEAN_BASKET,

  });
};

export const basketCheckout = (phones) => () => {
  alert(JSON.stringify(phones))
};


