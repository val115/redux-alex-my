import * as R from 'ramda'
import request from 'superagent'
// import fetch from 'fetch'

import phones from './mockPhones'
import categories from './mockCategories'

//Mocky.io
//header - Access-Control-Allow-Origin    -----  *
//Generate my HTTP Response
//Your link is ready: http://www.mocky.io/v2/5e905534330000218b27d6c4
//http://www.mocky.io/v2/5e905dff330000551827d6f7
export const fetchPhones = async () => {
  const { body }  = await request.get(
    'http://www.mocky.io/v2/5e9061c8330000541827d710'
    )
    console.log('PHONES', body.phones)
    return body.phones
  
    /* return new Promise((resolve, reject) => {
      //const phones =  fetch.get('http:/google.com/api/phones')
      resolve(phones) // вываливаемся в success
    // reject('error')  //в actions вываливаемся в FETCH_PHONES_FAILURE,
    }) */
}

//получение данных со с двигом offset
export const loadMorePhones = async ({ offset }) => {
  //const phones =  fetch.get(`http:/google.com/api/phones?offset=${offset}`)
  return new Promise(resolve => {
    resolve(phones)
    // reject("error")
  })
}

//получение конкретного тел
export const fetchPhoneById = async (id) => {
  return new Promise(resolve => {
    //propEq = объект свойства который равен id из массива phones
    const phone = R.find(R.propEq('id', id), phones)
    resolve(phone)
  })
}

export const fetchCategories = async () => {
  return new Promise(resolve => {
     //const phones =  fetch.get('http:/google.com/api/phones')
    resolve(categories)
  })
}

